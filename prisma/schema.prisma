datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider    = "zod-prisma"
  output      = "../src/lib/types/prisma"
  modelSuffix = "Schema"
}

model GiftItem {
  id          String  @id @default(uuid()) /// @zod.uuid()
  name        String
  price       String? /// @zod.regex(/(?:[$â‚¬])?\s?\d+(?:[,.]\d+)?/g, { message: "Price must consist of numbers with currency codes." });
  notes       String?
  recipient   User    @relation("ReceivingItems", fields: [recipientId], references: [id])
  recipientId String
  giftedBy    User?   @relation("GiftingItems", fields: [giftedById], references: [id])
  giftedById  String?
  link        String? /// @zod.url()
  purchased   Boolean @default(false)
  idea        Boolean @default(false)
  ideaLinkId  String? @unique
  groups      Group[]

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

enum Group {
  BENJAMINS
  HAUGEN
}

model User {
  id       String  @id @unique @default(uuid()) /// @zod.uuid()
  name     String? @unique
  username String

  items        GiftItem[] @relation("ReceivingItems")
  giftingItems GiftItem[] @relation("GiftingItems")
  partner      User?      @relation("Partner", fields: [partnerId], references: [id])
  partnerId    String?    @unique
  partner2     User?      @relation("Partner")
  groups       Group[]
  hue          Int        @default(145) /// @zod.min(0).max(360)

  sizes Json?

  auth_session Session[]
  key          Key[]

  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

model Session {
  id             String @id @unique
  user_id        String
  active_expires BigInt
  idle_expires   BigInt
  user           User   @relation(references: [id], fields: [user_id], onDelete: Cascade)

  group Group?

  @@index([user_id])
}

model Key {
  id              String  @id @unique
  hashed_password String?
  user_id         String
  user            User    @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
}
